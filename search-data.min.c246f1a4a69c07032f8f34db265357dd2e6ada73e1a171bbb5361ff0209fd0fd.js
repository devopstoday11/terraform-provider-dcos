(function(){const pages=[{"idx":0,"href":"/terraform-provider-dcos/docs/getting-started/","title":"Getting Started","content":""},{"idx":1,"href":"/terraform-provider-dcos/docs/getting-started/installation/","title":"Installation","content":"Installation There are various ways you can obtain the terraform-provider-dcs binary.\nBuild and Install From Source Make sure Go, make and GoLangCI-Lint are installed.\n On Linux call PLATFORMS=linux make. On macOS call PLATFORMS=darwin make Copy the binary in terraform.d/plugins to ~/.terraform.d with cp -r terraform.d/plugin ~/.terraform.d.  "},{"idx":2,"href":"/terraform-provider-dcos/docs/getting-started/authentication/","title":"Authentication","content":"Authentication TODO\n"},{"idx":3,"href":"/terraform-provider-dcos/docs/examples/","title":"Examples","content":""},{"idx":4,"href":"/terraform-provider-dcos/docs/resources/dcos_edgelb_v2_pool/","title":"dcos_edgelb_v2_pool","content":"Resource: dcos_edgelb_v2_pool Provides a resource \u0026hellip;\nExample Usage # an example provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } Argument Reference The following arguments are supported\n secret_name (Optional) Service account secret name for pool framework authentication. If omitted or left blank, the service account used to install Edge-LB will be used if present  constraints (Optional) Marathon style constraints for load balancer instance placement  secrets (Optional) DC/OS secrets  secret (Optional) Secret name  file (Optional) File name. The file \u0026ldquo;myfile\u0026rdquo; will be found at \u0026ldquo;$SECRETS/myfile\u0026rdquo;  environment_variables (Optional) Environment variables to pass to tasks. Prefix with \u0026ldquo;ELB_FILE_\u0026rdquo; and it will be written to a file. For example, the contents of \u0026ldquo;ELB_FILE_MYENV\u0026rdquo; will be written to \u0026ldquo;$ENVFILE/ELB_FILE_MYENV\u0026rdquo;  auto_certificate (Optional) Autogenerate a self-signed SSL/TLS certificate. It is not generated by default. It will be written to \u0026ldquo;$AUTOCERT\u0026rdquo;  haproxy_backends (Optional) Virtual networks to join  services (Optional)  mesos_task_id (Optional) Mesos task ID  endpoint_type (Optional)  endpoint_misc_str (Optional) Append arbitrary string to add to the end of the \u0026ldquo;server\u0026rdquo; directive  endpoint_port (Optional)  endpoint_all_ports (Optional)  endpoint_check_enabled (Optional)  endpoint_check_custom_str (Optional)  marathon_service_id (Optional) Marathon pod or application ID  marathon_service_id_pattern (Optional)  marathon_container_name (Optional) Marathon pod container name, optional unless using Marathon pods  mesos_framework_name (Optional) Mesos framework name  mesos_framework_id (Optional) Mesos framework ID  mesos_framework_id_pattern (Optional)  endpoint_address (Optional) Server address override, can be used to specify a cluster internal address such as a VIP  marathon_container_name_pattern (Optional)  mesos_framework_name_pattern (Optional)  mesos_task_name (Optional) Mesos task name  mesos_task_name_pattern (Optional)  mesos_task_id_pattern (Optional)  endpoint_port_name (Optional)  name (Optional) The name of the virtual network to join.  balance (Optional) Load balancing strategy. e.g. roundrobin, leastconn, etc.  custom_check_httpchk (Optional) The name of the virtual network to join.  rewrite_http_request_set_host_header (Optional) Set Host header  rewrite_http_sticky_custom_str (Optional) The name of the virtual network to join.  custom_check_httpchk_misc_str (Optional) The name of the virtual network to join.  protocol (Optional) Protocol  rewrite_http_to_path (Optional) The name of the virtual network to join.  rewrite_http_request_x_forwarded_proto_https_if_tls (Optional) Set X-Forwarded-Port HTTPS if TLS  rewrite_http_sticky_enabled (Optional) The name of the virtual network to join.  custom_check_ssl_hello_chk (Optional) The name of the virtual network to join.  custom_check_misc_str (Optional) The name of the virtual network to join.  rewrite_http_request_forwardfor (Optional) Set X-Forwarded-For  rewrite_http_request_rewrite_path (Optional) Rewrite Path  rewrite_http_response_rewrite_location (Optional) The name of the virtual network to join.  misc_strs (Optional) Additional template lines inserted before servers  rewrite_http_host (Optional) The name of the virtual network to join.  rewrite_http_from_path (Optional) The name of the virtual network to join.  rewrite_http_request_x_forwarded_port (Optional) Set X-Forwarded-Port  pool_healthcheck_interval (Optional) Pool tasks healthcheck interval (in seconds)  pool_healthcheck_timeout (Optional) Maximum amount of time that Mesos will wait for the healthcheck container to finish executing  name (Required) The pool name  principal (Optional) Mesos principal for pool framework authentication. If omitted or left blank, the service account used to install Edge-LB will be used if present  mem (Optional) Memory requirements (in MB)  role (Optional) Mesos role for load balancers. Defaults to \u0026ldquo;slave_public\u0026rdquo; so that load balancers will be run on public agents. Use \u0026ldquo;*\u0026rdquo; to run load balancers on private agents. Read more about Mesos roles at http://mesos.apache.org/documentation/latest/roles/  cpus (Optional) CPU requirements  namespace (Optional) The DC/OS space (sometimes also referred to as a \u0026ldquo;group\u0026rdquo;).  disk (Optional) Disk size (in MB)  pool_count (Optional) Number of load balancer instances in the pool  ports (Optional) Override ports to allocate for each load balancer instance. Defaults to {{haproxy.frontends[].bindPort}} and {{haproxy.stats.bindPort}}. Use this field to pre-allocate all needed ports with or without the frontends present. For example: [80, 443, 9090]. If the length of the ports array is not zero, only the ports specified will be allocated by the pool scheduler  virtual_networks (Optional) Virtual networks to join  name (Optional) The name of the virtual network to join.  labels (Optional) Labels to pass to the virtual network plugin.  haproxy_frontends (Optional) Virtual networks to join  name (Optional) Defaults to frontend_{{bindAddress}}_{{bindPort}}  bind_port (Optional) The port (e.g. 80 for HTTP or 443 for HTTPS) that this frontend will bind to  bind_modifier (Optional) Additional text to put in the bind field  certificates (Optional)  redirect_to_https_except (Optional)  host (Optional) Match on host  path_beg (Optional) Match on path  linked_backend_default_backend (Optional) This is default backend that is routed to if none of the other filters are matched.  bind_address (Optional) Only use characters that are allowed in the frontend name. Known invalid frontend name characters include \u0026ldquo;*\u0026quot;, \u0026ldquo;[\u0026quot;, and \u0026ldquo;]\u0026rdquo;  misc_strs (Optional) Additional template lines inserted before use_backend  protocol (Optional) Protocol  linked_backend_map (Optional) This is an optional field that specifies a mapping to various backends. These rules are applied in order.  backend (Optional)  host_eq (Optional)  host_reg (Optional)  path_beg (Optional)  path_end (Optional)  path_reg (Optional)  pool_healthcheck_grace_period (Optional) Pool tasks healthcheck grace period (in seconds)  pool_healthcheck_max_fail (Optional) Pool tasks healthcheck maximum number of consecutive failures before declaring as unhealthy   Attributes Reference addition to all arguments above, the following attributes are exported:\n gid (Optional) User ID to apply the grant on.   "},{"idx":5,"href":"/terraform-provider-dcos/docs/resources/dcos_job/","title":"dcos_job","content":"Resource: dcos_job Provides a resource creating metronome jobs on DC/OS.\nShould be used together with dcos_job_schedule.\nExample Usage # an example provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;dcos_job\u0026#34; \u0026#34;job\u0026#34; { name = \u0026#34;testjob\u0026#34; cmd = \u0026#34;echo foo\u0026#34; cpus = 1 mem = 64 disk = 0 user = \u0026#34;root\u0026#34; description = \u0026#34;the best description ever\u0026#34; max_launch_delay = 600 docker { image = \u0026#34;ubuntu:latest\u0026#34; } placement_constraint { attribute = \u0026#34;host\u0026#34; operator = \u0026#34;LIKE\u0026#34; } env { key = \u0026#34;my_env_key\u0026#34; secret = \u0026#34;secret1\u0026#34; } env { key = \u0026#34;cool_key\u0026#34; value = \u0026#34;cool_value\u0026#34; } secrets { secret1 = \u0026#34;/something\u0026#34; cool_secret = \u0026#34;something_else\u0026#34; } restart { active_deadline_seconds = 120 policy = \u0026#34;NEVER\u0026#34; } artifacts { uri = \u0026#34;http://downloads.mesosphere.com/robots.txt\u0026#34; extract = false executable = true cache = false } volume { container_path = \u0026#34;/mnt/test\u0026#34; host_path = \u0026#34;/dev/null\u0026#34; mode = \u0026#34;RW\u0026#34; } } resource \u0026#34;dcos_job_schedule\u0026#34; \u0026#34;jobsched\u0026#34; { dcos_job_id = \u0026#34;${dcos_job.job.name}\u0026#34; name = \u0026#34;someschedule\u0026#34; cron = \u0026#34;0,30 * * * *\u0026#34; } Argument Reference The following arguments are supported\n ucr (Optional)  image (Required) The ucr repository image name.  secrets (Optional) Any secrets that are necessary for the job  placement_constraint (Optional)  attribute (Required) The attribute name for this constraint.  operator (Required) The operator for this constraint.  value (Optional) The value for this constraint.  cpus (Required) The number of CPU shares this job needs per instance. This number does not have to be integer, but can be a fraction.  name (Required) Unique identifier for the job.  user (Optional) The user to use to run the tasks on the agent.  description (Optional) A description of this job.  labels (Optional) Attaching metadata to jobs can be useful to expose additional information to other services.  args (Optional) An array of strings that represents an alternative mode of specifying the command to run. This was motivated by safe usage of containerizer features like a custom Docker ENTRYPOINT. Either cmd or args must be supplied. It is invalid to supply both cmd and args in the same job.  env (Optional) Environment variables  key (Required) The key/name of the variable  value (Required) The value of the key/name  secret (Optional) The name of the secret.  restart (Optional) Defines the behavior if a task fails.  active_deadline_seconds (Optional) If the job fails, how long should we try to restart the job. If no value is set, this means forever.  policy (Required) The policy to use if a job fails. NEVER will never try to relaunch a job. ON_FAILURE will try to start a job in case of failure.  mem (Required) The amount of memory in MB that is needed for the job per instance.  cmd (Optional) The command that is executed. This value is wrapped by Mesos via /bin/sh -c ${job.cmd}. Either cmd or args must be supplied. It is invalid to supply both cmd and args in the same job.  artifacts (Optional)  cache (Optional) Cache fetched artifact if supported by Mesos fetcher module.  uri (Required) URI to be fetched by Mesos fetcher module.  executable (Optional) Set fetched artifact as executable.  extract (Optional) Extract fetched artifact if supported by Mesos fetcher module.  docker (Optional)  image (Required) The docker repository image name.  volume (Optional)  container_path (Required) The path of the volume in the container.  host_path (Required) The path of the volume on the host.  mode (Required) Possible values are RO for ReadOnly and RW for Read/Write.  secret (Optional) Allow for volume secrets if using UCR.  disk (Optional) How much disk space is needed for this job. This number does not have to be an integer, but can be a fraction.  max_launch_delay (Optional) The number of seconds until the job needs to be running. If the deadline is reached without successfully running the job, the job is aborted.   Attributes Reference addition to all arguments above, the following attributes are exported:\n gid (Optional) User ID to apply the grant on.   "},{"idx":6,"href":"/terraform-provider-dcos/docs/resources/dcos_job_schedule/","title":"dcos_job_schedule","content":"Resource: dcos_job_schedule provides a resource adding schedules to Metronome jobs.\nExample Usage # an example provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } data \u0026#34;dcos_job\u0026#34; \u0026#34;job\u0026#34; { name = \u0026#34;somejob\u0026#34; } resource \u0026#34;dcos_job_schedule\u0026#34; \u0026#34;jobsched\u0026#34; { dcos_job_id = \u0026#34;${data.dcos_job.job.name}\u0026#34; name = \u0026#34;someschedule\u0026#34; cron = \u0026#34;0,30 * * * *\u0026#34; } Argument Reference The following arguments are supported\n name (Required) Unique identifier for the schedule.  cron (Required) Cron based schedule string  concurrency_policy (Optional) Defines the behavior if a job is started, before the current job has finished. ALLOW will launch a new job, even if there is an existing run.  enabled (Optional) Defines if the schedule is enabled or not.  starting_deadline_seconds (Optional) The number of seconds until the job is still considered valid to start.  timezone (Optional) IANA based time zone string. See http://www.iana.org/time-zones for a list of available time zones.  dcos_job_id (Required) Unique identifier for the job.   "},{"idx":7,"href":"/terraform-provider-dcos/docs/resources/dcos_marathon_app/","title":"dcos_marathon_app","content":"Resource: dcos_marathon_app Provides a resource \u0026hellip;\nExample Usage # an example provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } Argument Reference The following arguments are supported\n args (Optional)  cpus (Optional)  fetch (Optional)  extract (Optional)  uri (Optional)  cache (Optional)  executable (Optional)  user (Optional)  executor (Optional)  dcos_framework (Optional)  plan_path (Optional)  timeout (Optional) Timeout in seconds to wait for a framework to complete deployment  is_framework (Optional)  constraints (Optional)  attribute (Optional)  operation (Optional)  parameter (Optional)  disk (Optional)  labels (Optional)  networks (Optional)  name (Optional)  mode (Required)  labels (Optional)  version (Optional)  accepted_resource_roles (Optional)  container (Optional)  volumes (Optional)  host_path (Optional)  secret (Optional)  mode (Optional)  external (Optional)  options (Optional)  name (Optional)  provider (Optional)  persistent (Optional)  type (Optional)  size (Optional)  max_size (Optional)  container_path (Optional)  port_mappings (Optional)  name (Optional)  network_names (Optional)  container_port (Optional)  host_port (Optional)  service_port (Optional)  protocol (Optional)  labels (Optional)  type (Optional)  docker (Optional)  parameters (Optional)  key (Optional)  value (Optional)  privileged (Optional)  force_pull_image (Optional)  image (Required)  pull_config (Optional)  secret (Optional)  gpus (Optional)  backoff_seconds (Optional)  dependencies (Optional)  env (Optional)  secrets (Optional)  unreachable_strategy (Optional)  inactive_after_seconds (Optional)  expunge_after_seconds (Optional)  app_id (Required)  mem (Optional)  backoff_factor (Optional)  health_checks (Optional)  grace_period_seconds (Optional)  interval_seconds (Optional)  port_index (Optional)  port (Optional)  timeout_seconds (Optional)  ignore_http_1xx (Optional)  max_consecutive_failures (Optional)  protocol (Optional)  delay_seconds (Optional)  path (Optional)  command (Optional)  value (Optional)  port_definitions (Optional)  port (Optional)  name (Optional)  labels (Optional)  protocol (Optional)  max_launch_delay_seconds (Optional)  kill_selection (Optional)  marathon_service_url (Optional) By default we use the default DC/OS marathon serivce: service/marathon. But to support marathon on marathon the service url can be schanged.  cmd (Optional)  instances (Optional)  require_ports (Optional)  upgrade_strategy (Optional)  minimum_health_capacity (Optional)  maximum_over_capacity (Optional)   Attributes Reference addition to all arguments above, the following attributes are exported:\n gid (Optional) User ID to apply the grant on.   "},{"idx":8,"href":"/terraform-provider-dcos/docs/resources/dcos_marathon_pod/","title":"dcos_marathon_pod","content":"Resource: dcos_marathon_pod Provides a resource \u0026hellip;\nExample Usage # an example provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } Argument Reference The following arguments are supported\n container (Optional) DC/OS secrets  volume_mounts (Optional) DC/OS secrets  name (Required)  mount_path (Required)  read_only (Optional)  artifact (Optional) DC/OS secrets  cache (Optional)  executable (Optional)  extract (Optional)  uri (Optional)  dest_path (Optional)  name (Required)  endpoints (Optional) DC/OS secrets  name (Optional)  container_port (Optional)  host_port (Optional)  protocol (Optional)  labels (Optional)  env (Optional)  user (Optional)  secret (Optional) DC/OS secrets  env_var (Required)  source (Required)  lifecycle (Optional) DC/OS secrets  kill_grace_period_seconds (Required)  health_check (Optional) DC/OS secrets  delay_seconds (Optional)  http (Optional) DC/OS secrets  path (Optional)  scheme (Optional)  endpoint (Optional)  grace_period_seconds (Optional)  interval_seconds (Optional)  max_consecutive_failures (Optional)  timeout_seconds (Optional)  resources (Optional) DC/OS secrets  mem (Optional)  disk (Optional)  gpus (Optional)  cpus (Optional)  exec (Optional) DC/OS secrets  command_shell (Optional)  image (Optional) DC/OS secrets  kind (Optional)  id (Optional)  force_pull (Optional)  labels (Optional)  labels (Optional)  scheduling (Optional) DC/OS secrets  unreachable_strategy (Optional) DC/OS secrets  inactive_after_seconds (Optional)  expunge_after_seconds (Optional)  backoff (Optional) DC/OS secrets  backoff (Optional)  backoff_factor (Optional)  max_launch_delay (Optional)  upgrade (Optional) DC/OS secrets  minimum_health_capacity (Optional)  maximum_over_capacity (Optional)  kill_selection (Optional)  volume (Optional) DC/OS secrets  persistent (Optional) DC/OS secrets  max_size (Optional)  constraints (Optional)  parameter (Optional)  attribute (Required)  operation (Required)  type (Optional)  size (Optional)  name (Required)  host (Required)  secrets (Optional) DC/OS secrets  secret_name (Required)  env_var (Optional)  source (Optional)  user (Optional)  marathon_service_url (Optional) By default we use the default DC/OS marathon serivce: service/marathon. But to support marathon on marathon the service url can be schanged.  executor_resources (Optional) DC/OS secrets  cpus (Required)  mem (Required)  disk (Optional)  name (Required)  network (Optional) DC/OS secrets  name (Optional)  mode (Optional)  labels (Optional)  scaling (Optional) DC/OS secrets  kind (Optional)  instances (Optional)  max_instances (Optional)   Attributes Reference addition to all arguments above, the following attributes are exported:\n gid (Optional) User ID to apply the grant on.   "},{"idx":9,"href":"/terraform-provider-dcos/docs/resources/dcos_package/","title":"dcos_package","content":"Resource: dcos_package Deploys (or upgrades) a service package on DC/OS.\nExample Usage data \u0026#34;dcos_package_config\u0026#34; \u0026#34;jenkins-config\u0026#34; { ... }# Deploy a package resource \u0026#34;dcos_package\u0026#34; \u0026#34;jenkins\u0026#34; { config = \u0026#34;${data.dcos_package_config.jenkins-config.config}\u0026#34; app_id = \u0026#34;/jenkins\u0026#34; wait = true wait_duration = \u0026#34;5m\u0026#34; sdk = true } Argument Reference The following arguments are supported\n config (Required) The configuration for the package to be deployed. This should be set to the .config output variable of a dcos_package_config data resource. (Note that the package name and version is specified in the package configuration).  app_id (Optional, defaults to /\u0026lt;package-name\u0026gt;) The name of the app to deploy on DC/OS  wait (Optional, defaults to true) When true, this resource will block any further action until the package is installed/uninstalled/updated. Set this to false to speed-up deployment, but only if you are not depending on any output variables of this resource.  wait_duration (Optional, defaults to 5m) How long to wait for a blocking operation to complete. This can be any human-readable time expression (eg. “1h”, “10m”, “20s”)  sdk (Optional, defaults to true) When true, the provider will use the cosmos SDK API to update / restart the service. When false, any configuration change will cause the service to be uninstalled and re-installed.   Updating Services The dcos_package resource is smart enough to distinguish between configuration changes, version changes or name changes and can react accordingly.\nService Redeployment A service will be completely re-deployed (uninstalled and reinstalled) if any of the following changes have occurred:\n The package name has changed The app_id has changed The configuration has changed and sdk=false meaning that the service is not built using SDK, and therefore the provider cannot use the SDK api to update it.  Service Reconfiguration A service will be re-configured (“updated” using the cosmos API) if any of the following changes have occurred and sdk=true :\n The package version has changed The package configuration has changed The configuration checksum property has changed  Service Restart A service will be restarted (by force-restarting the “deploy” plan) if any of the following changes have occurred and sdk=true:\n Only the checksum property has changed (the rest of the configuration has remained intact)  "},{"idx":10,"href":"/terraform-provider-dcos/docs/data-resources/dcos_package_config/","title":"dcos_package_config","content":"Data Resource: dcos_package_config Provides the configuration settings of a package before passing it to the dcos_package resource for the actual deployment.\nExample Usage resource \u0026#34;dcos_package_repo\u0026#34; \u0026#34;universe\u0026#34; { } data \u0026#34;dcos_package_version\u0026#34; \u0026#34;jenkins-latest\u0026#34; { repo_url = \u0026#34;${dcos_package_repo.universe.url}\u0026#34; name = \u0026#34;jenkins\u0026#34; version = \u0026#34;latest\u0026#34; index = -1 }# Optional previous configuration to chain against data \u0026#34;dcos_package_config\u0026#34; \u0026#34;previous\u0026#34; { ... }# Configure a specific version of the package data \u0026#34;dcos_package_config\u0026#34; \u0026#34;current\u0026#34; { version_spec = \u0026#34;${data.dcos_package_version.jenkins-latest.spec}\u0026#34; extend = \u0026#34;${data.dcos_package_config.previous.config}\u0026#34; autotype = true checksum = [ \u0026#34;version-1\u0026#34; ] section { path = \u0026#34;service\u0026#34; map = { cpus = 4 mem = 2048 } } } Argument Reference The following arguments are supported\n version_spec (Optional) The package name, version and repository meta-data. Assign here the value of the .spec output variable of a dcos_package_version data resource.  extend (Optional) The previous configuration to chain. Assign here the value of the .config output variable of another dcos_package_config resource.  autotype (Optional, defaults to true) If true, the provider will try to convert string JSON values from strings to their respective types (eg. “123” will become an integer 123)  checksum (Optional, defaults to []) An array of arbitrary string expressions that can be used to calculate a unique checksum for this configuration.  section (Optional, defaults to []) One or more configuration sections. Refer to Configuration Sections for more details.  config (Output Only) This is an output (read-only) variable with the configuration meta-data of the package. Can be passed down to an extend property of another dcos_package_config resource, or to a dcos_package resource to deploy the service.   Configuration Chaining This data resource can be extended, enabling the user to share common parts. A configuration is extended by chaining the previous .config variable with the current .extend variable:\ndata \u0026#34;dcos_package_config\u0026#34; \u0026#34;kafka-zookeeper\u0026#34; { ... } data \u0026#34;dcos_package_config\u0026#34; \u0026#34;kafka-zookeeper-kerberos\u0026#34; { extend = \u0026#34;${data.dcos_package_config.kafka-zookeeper.config}\u0026#34; ... } You are free to nest your configurations as desired, making sure that the final dcos_package_config data resource passed to the dcos_package resource contains a version information:\n graph TD; subgraph Example 2; style cfg4 fill:#fff,stroke:#999; style cfg5 fill:#fff,stroke:#999; style cfg6 fill:#fff,stroke:#999; style cfg7 fill:#fff,stroke:#999; style cfg8 fill:#fff,stroke:#999; cfg4(\"Config\nA\"); cfg4 -- .extend -- cfg5(\"Config\nB\"); cfg4 -- .extend -- cfg6(\"Config\nC\"); cfg5 -- .extend -- cfg7(\"Config\nD\"); cfg6 -- .extend -- cfg8(\"Config\nE\"); ver2Version 1] -- .version_spec -- cfg7; ver3Version 2] -- .version_spec -- cfg8; cfg7 -- .config -- depl3[\"DeploymentA\"]; cfg8 -- .config -- depl4[\"DeploymentB\"]; end; subgraph Example 1; style cfg1 fill:#fff,stroke:#999; style cfg2 fill:#fff,stroke:#999; style cfg3 fill:#fff,stroke:#999; ver1Version] -- .version_spec -- cfg1(\"Config\nA\"); cfg1 -- .extend -- cfg2(\"ConfigB\"); cfg1 -- .extend -- cfg3(\"ConfigC\"); cfg2 -- .config -- depl1[\"DeploymentA\"]; cfg3 -- .config -- depl2[\"DeploymentB\"]; end; You can attach a version_spec at any point of the chain. As seen in the example above, this is not required to happen on the root.\ndata \u0026#34;dcos_package_version\u0026#34; \u0026#34;kafka-zookeeper\u0026#34; { ... } data \u0026#34;dcos_package_config\u0026#34; \u0026#34;kafka-zookeeper\u0026#34; { version_spec = \u0026#34;${data.dcos_package_version.kafka-zookeeper.spec}\u0026#34; ... } Configuration Sections In order to be able to provide configuration parameters in a format friendly to terraform we are using the concept of configuration “sections”. Each section is a value in a particular path in the configuration JSON object. There are three kinds of sections:\n Object Sections List Sections Raw Sections  Each section has a path property that specifies the JSON path where to inject it\u0026rsquo;s properties. This property can point to an object at arbitrary depth. For example:\nThe configuration:\ndata \u0026#34;dcos_package_config\u0026#34; ... { section { path = \u0026#34;service\u0026#34; map { name = \u0026#34;foo\u0026#34; } } }   Will produce:\n{ \u0026#34;service\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;foo\u0026#34; } }    And the configuration:\ndata \u0026#34;dcos_package_config\u0026#34; ... { section { path = \u0026#34;service.kdc.hosts\u0026#34; list = [ \u0026#34;host1\u0026#34;, \u0026#34;host2\u0026#34;, \u0026#34;host3\u0026#34; ] } }   Will produce:\n{ \u0026#34;service\u0026#34;: { \u0026#34;kdc\u0026#34;: { \u0026#34;hosts\u0026#34;: [ \u0026#34;host1\u0026#34;, \u0026#34;host2\u0026#34;, \u0026#34;host3\u0026#34; ] } } }    Object Section The object section is equivalent to a JSON object. The section properties will be mapped 1:1 to the resulting JSON.\nsection { path = \u0026#34;service.config\u0026#34; map = { name = \u0026#34;foo\u0026#34; cpus = 3 ... } }  path (Required) The path in the resulting object where to inject the object properties.  map (Required) An object with an arbitrary set of (key/value) pairs that will be inserted to the target path.   List Section The list section is equivalent to a JSON array, with the only exception that you must specify scalar values.\nsection { path = \u0026#34;service.kdc.hosts\u0026#34; list = [ \u0026#34;host-1\u0026#34;, \u0026#34;host-2\u0026#34;, \u0026#34;host-3\u0026#34; ] }  path (Required) The path in the resulting object where to inject the object properties.  list (Required) An list of scalar values (eg. strings, booleans, numbers) that will be inserted to the target path.   Raw Section If the map or list values are not fitting in your case, you can fall-back to raw JSON string.\nsection { path = \u0026#34;service\u0026#34; json = \u0026lt;\u0026lt;EOF { \u0026#34;placement_constraint\u0026#34;: \u0026#34;[[\\\u0026#34;@zone\\\u0026#34;,\\\u0026#34;GROUP_BY\\\u0026#34;,\\\u0026#34;3\\\u0026#34;]]\u0026#34; } EOF }  path (Required) The path in the resulting object where to inject the object properties.  raw (Required) An valid JSON string that will be inserted to the target path. This can be an object, an array or a scalar value.   "},{"idx":11,"href":"/terraform-provider-dcos/docs/resources/dcos_package_repo/","title":"dcos_package_repo","content":"Resource: dcos_package_repo Installs a catalog repository on DC/OS that can be used to resolve service packages.\nExample Usage resource \u0026#34;dcos_package_repo\u0026#34; { name = \u0026#34;Universe\u0026#34; url = \u0026#34;https://universe.mesosphere.com/repo\u0026#34; volatile = false index = -1 } Argument Reference The following arguments are supported\n name (Optional, defaults to Universe) the name of the repository.  url (Optional, defaults to https://universe.mesosphere.com/repo) the url of the repository.  volatile (Optional, defaults to false) if set to true, this repository will be removed when the resource is destroyed. If you are expecting the cluster to use this repository outside of your deployment, keep it false.  index (Optional, defaults to -1) defines the index where this repository will be installed at. This affects the resolution order for it\u0026rsquo;s packages. If -1, it will be appended at the end (lowest priority), and if 0 it will be inserted at the beginning (highest priority).   "},{"idx":12,"href":"/terraform-provider-dcos/docs/data-resources/dcos_package_version/","title":"dcos_package_version","content":"Data Resource: dcos_package_version Selects a package version from the given catalog repository.\nExample Usage resource \u0026#34;dcos_package_repo\u0026#34; \u0026#34;universe\u0026#34; { }# Select a package version out of a repository data \u0026#34;dcos_package_version\u0026#34; \u0026#34;jenkins-latest\u0026#34; { repo_url = \u0026#34;${dcos_package_repo.universe.url}\u0026#34; name = \u0026#34;jenkins\u0026#34; version = \u0026#34;latest\u0026#34; index = -1 } Argument Reference The following arguments are supported\n repo_url (Required) the repository URL where to search for the package. This is typically the .url output variable of a dcos_package_repo resource  name (Required) the name of the package to resolve in the repository specified.  version (Required) the version of the package to resolve (can be latest to resolve the latest available version).  spec (Output Only) The package version specification that can be passed down to the .version_spec argument of a dcos_package_config data resource.   "},{"idx":13,"href":"/terraform-provider-dcos/docs/resources/dcos_security_cluster_oidc/","title":"dcos_security_cluster_oidc","content":"Resource: dcos_security_cluster_oidc Resource to maintain SAML authentication with DC/OS Cluster\nExample Usage # Assign the bootstrap user into testgroup provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } variable \u0026#34;client_id\u0026#34; { default = \u0026#34;Google Client ID\u0026#34; } variable \u0026#34;client_secret\u0026#34; { default = \u0026#34;Google Client Secret\u0026#34; } data \u0026#34;dcos_base_url\u0026#34; \u0026#34;current\u0026#34; {} resource \u0026#34;dcos_security_cluster_oidc\u0026#34; \u0026#34;google\u0026#34; { provider_id = \u0026#34;google-idp\u0026#34; description = \u0026#34;Google\u0026#34; issuer = \u0026#34;https://accounts.google.com\u0026#34; base_url = \u0026#34;https://${data.dcos_base_url.current.url}\u0026#34; client_id = \u0026#34;${var.client_id}\u0026#34; client_secret = \u0026#34;${var.client_secret}\u0026#34; } Argument Reference The following arguments are supported\n provider_id (Required) Unique Identifier for this Provider. Only lowercase characters allowed.  base_url (Required) The Clusters base URL.  description (Optional) Description string for this provider.  client_id (Required) Client ID from identity provider.  client_secret (Required) Client secret from identity provider.  issuer (Required) Identity Provider issuer string.  ca_certs (Optional)  verify_server_certificate (Optional, defaults to false) Verify SSL certificates.   "},{"idx":14,"href":"/terraform-provider-dcos/docs/resources/dcos_security_cluster_saml/","title":"dcos_security_cluster_saml","content":"Resource: dcos_security_cluster_saml Resource to maintain SAML authentication with DC/OS Cluster\nExample Usage # Assign the bootstrap user into testgroup provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } data \u0026#34;dcos_base_url\u0026#34; \u0026#34;current\u0026#34; {} resource \u0026#34;dcos_security_cluster_saml\u0026#34; \u0026#34;OneloginTest\u0026#34; { provider_id = \u0026#34;onelogin\u0026#34; description = \u0026#34;OneLogin SAML Provider\u0026#34;# SAML provider metadata from a file idp_metadata = \u0026#34;${file(\u0026#34;~/testcluster-onelogin.xml\u0026#34;)}\u0026#34; base_url = \u0026#34;${data.dcos_base_url.current.url}\u0026#34; } output \u0026#34;sp_metadata\u0026#34; { value = \u0026#34;${dcos_iam_saml_provider.OneloginTest.metadata}\u0026#34; } output \u0026#34;callback_url\u0026#34; { value = \u0026#34;${dcos_iam_saml_provider.OneloginTest.callback_url}\u0026#34; } output \u0026#34;entity_id\u0026#34; { value = \u0026#34;${dcos_iam_saml_provider.OneloginTest.entity_id}\u0026#34; } Argument Reference The following arguments are supported\n provider_id (Required) Unique Identifier for this Provider. Only lowercase characters allowed.  idp_metadata (Required) IDP Metadata.  description (Optional) Description string for this provider.  base_url (Optional) Service provider base URL.   Attributes Reference addition to all arguments above, the following attributes are exported:\n callback_url (Optional) SAML Callbackurl.  metadata (Optional) SAML service provider metadata.  entity_id (Optional) Provided entity ID.   "},{"idx":15,"href":"/terraform-provider-dcos/docs/resources/dcos_security_org_group/","title":"dcos_security_org_group","content":"Resource: dcos_security_org_group Provides a resource for creating DC/OS user groups.\nExample Usage # Create a group provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;dcos_security_org_group\u0026#34; \u0026#34;testgroup\u0026#34; { gid = \u0026#34;testgroup\u0026#34; description = \u0026#34;This group is for testing only\u0026#34; } Argument Reference The following arguments are supported\n gid (Required) User ID to apply the grant on.  description (Optional) a description for the group.   Attributes Reference addition to all arguments above, the following attributes are exported:\n group_provider (Optional) Group linked to an external provider.   "},{"idx":16,"href":"/terraform-provider-dcos/docs/resources/dcos_security_org_group_user/","title":"dcos_security_org_group_user","content":"Resource: dcos_security_org_group_user Provides a resource for assigning users into groups.\nExample Usage # Assign the bootstrap user into testgroup provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;dcos_security_org_group\u0026#34; \u0026#34;testgroup\u0026#34; { gid = \u0026#34;testgroup\u0026#34; description = \u0026#34;This group is for testing only\u0026#34; } resource \u0026#34;dcos_security_org_group_user\u0026#34; \u0026#34;testgroupassign\u0026#34; { gid = \u0026#34;${dcos_security_org_group.testgroup.gid}\u0026#34; uid = \u0026#34;bootstrapuser\u0026#34; } Argument Reference The following arguments are supported\n gid (Required) Group ID.  uid (Required) User ID.   "},{"idx":17,"href":"/terraform-provider-dcos/docs/resources/dcos_security_org_service_account/","title":"dcos_security_org_service_account","content":"Resource: dcos_security_org_service_account Provides a resource for creating service accounts.\nExample Usage # Create a Service Account from a generated private key provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;tls_private_key\u0026#34; \u0026#34;k8s\u0026#34; { algorithm = \u0026#34;RSA\u0026#34; rsa_bits = \u0026#34;2048\u0026#34; } resource \u0026#34;dcos_security_org_service_account\u0026#34; \u0026#34;k8s-sa\u0026#34; { uid = \u0026#34;kubernetes-service-account\u0026#34; description = \u0026#34;Terraform provider Test User\u0026#34; public_key = \u0026#34;${tls_private_key.k8s.public_key_pem}\u0026#34; } resource \u0026#34;dcos_security_org_user_grant\u0026#34; \u0026#34;k8s-grant\u0026#34; { uid = \u0026#34;${dcos_security_org_service_account.k8s-sa.uid}\u0026#34; resource = \u0026#34;dcos:mesos:master:framework:role:kubernetes-role\u0026#34; action = \u0026#34;create\u0026#34; } Argument Reference The following arguments are supported\n uid (Required) User ID to apply the grant on.  description (Optional) a description for the Service Account.  public_key (Required) Public key to use.   "},{"idx":18,"href":"/terraform-provider-dcos/docs/resources/dcos_security_org_user/","title":"dcos_security_org_user","content":"Resource: dcos_security_org_user Provide a user resource. Managing users and their credentials.\nExample Usage # Create a Admin User with random password. provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;random_password\u0026#34; \u0026#34;password\u0026#34; { length = 16 special = true override_special = \u0026#34;_%@\u0026#34; } resource \u0026#34;dcos_security_org_user\u0026#34; \u0026#34;myadmin\u0026#34; { uid = \u0026#34;myadmin\u0026#34; description = \u0026#34;Terraform managed admin user\u0026#34; password = \u0026#34;${random_string.password.result}\u0026#34; } resource \u0026#34;dcos_security_group_user\u0026#34; { uid = \u0026#34;${dcos_security_org_user.myadmin.uid}\u0026#34; gid = \u0026#34;superusers\u0026#34; } Argument Reference The following arguments are supported\n uid (Required) the user ID.  description (Optional) a description for the User.  password (Optional) Specified password for the User. Optional setting could also be maintained outside of Terraform.   "},{"idx":19,"href":"/terraform-provider-dcos/docs/resources/dcos_security_org_user_grant/","title":"dcos_security_org_user_grant","content":"Resource: dcos_security_org_user_grant Provides a grant resource maintaining a grant on a User or Service Account.\nExample Usage # Create a Secret containing a random password provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;dcos_security_org_user\u0026#34; \u0026#34;myadmin\u0026#34; { uid = \u0026#34;myadmin\u0026#34; description = \u0026#34;Terraform managed admin user\u0026#34; } locals { admin_full_grants = [ \u0026#34;dcos:adminrouter:service:marathon\u0026#34;, \u0026#34;dcos:adminrouter:ops:slave\u0026#34; ] } resource \u0026#34;dcos_security_org_user_grant\u0026#34; \u0026#34;myadmin-full-grants\u0026#34; { count = \u0026#34;${length(local.admin_full_grants)}\u0026#34; uid = \u0026#34;${dcos_security_org_user.myadmin.uid}\u0026#34; resource = \u0026#34;${element(local.admin_full_grants, count.index)}\u0026#34; action = \u0026#34;full\u0026#34; } Argument Reference The following arguments are supported\n uid (Required) User ID to apply the grant on.  resource (Required) resource to grant access.  action (Required) granted action on resource.   "},{"idx":20,"href":"/terraform-provider-dcos/docs/resources/dcos_security_secret/","title":"dcos_security_secret","content":"Resource: dcos_security_secret Provides an secret resource. This allows to maintain secrets in a DC/OS secret store.\nExample Usage # Create a Secret containing a random password provider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-cluster\u0026#34; } resource \u0026#34;random_password\u0026#34; \u0026#34;password\u0026#34; { length = 16 special = true override_special = \u0026#34;_%@\u0026#34; } resource \u0026#34;dcos_security_secret\u0026#34; \u0026#34;myapp-password\u0026#34; { path = \u0026#34;/myapp/password\u0026#34; value = \u0026#34;${random_string.password.result}\u0026#34; } Argument Reference The following arguments are supported\n path (Required) path to the secret.  value (Required) value of the secret.  store (Optional, defaults to default) The name of the secret store.   "},{"idx":21,"href":"/terraform-provider-dcos/docs/resources/","title":"Resources","content":""},{"idx":22,"href":"/terraform-provider-dcos/docs/data-resources/","title":"Data Resources","content":""},{"idx":23,"href":"/terraform-provider-dcos/docs/data-resources/dcos_security_secret_service_account_secret/","title":"dcos_security_secret_service_account_secret","content":"Data Resource: dcos_security_secret_service_account_secret Computes the contents for the service account secret\nExample Usage # Create a private key using an external provider (eg. tls) resource \u0026#34;tls_private_key\u0026#34; \u0026#34;service_account_key\u0026#34; { algorithm = \u0026#34;RSA\u0026#34; rsa_bits = \u0026#34;2048\u0026#34; }# Pass the private key and the user account to the resource data \u0026#34;dcos_security_secret_service_account_secret\u0026#34; \u0026#34;service_account\u0026#34; { uid = \u0026#34;user-login\u0026#34; private_key = \u0026#34;${tls_private_key.service_account_key.private_key_pem}\u0026#34; }# Handle the contents (eg. upload to a secret) resource \u0026#34;dcos_security_secret\u0026#34; \u0026#34;service_account_secret\u0026#34; { path = \u0026#34;my-service/service-account\u0026#34; value = \u0026#34;${data.dcos_security_secret_service_account_secret.contents}\u0026#34; } Argument Reference The following arguments are supported\n private_key (Required) The PEM-encoded contents of a private key. This can be either a PKCS1 private key or PKCS8 private key without password. Any other type will be rejected.  uid (Required) The user ID.  login_endpoint (Required) Override the default login endpoint that will be used by the service.  contents (Output Only) This is an output (read-only) variable with the contents of the service account secret. This value can be safely uploaded to a service account secret and later used by the service in DC/OS.   "},{"idx":24,"href":"/terraform-provider-dcos/","title":"","content":"DC/OS Provider The DC/OS provider is used to interact with workload on DC/OS(dcos.io). Its configuration is the same as for dcos-cli\nExample Usage provider \u0026#34;dcos\u0026#34; { dcos_url = \u0026#34;\u0026lt;cluster url\u0026gt;\u0026#34; user = \u0026#34;bootstrapuser\u0026#34; password = \u0026#34;\u0026lt;secret dcos password\u0026gt;\u0026#34; } resource \u0026#34;dcos_marathon_pod\u0026#34; \u0026#34;simplepod\u0026#34; { name = \u0026#34;simplepod\u0026#34; scaling { kind = \u0026#34;fixed\u0026#34; instances = 1 } container { name = \u0026#34;sleep1\u0026#34; exec { command_shell = \u0026#34;sleep 1000\u0026#34; } resources { cpus = 0.1 mem = 32 } } network { mode = \u0026#34;HOST\u0026#34; } } Authentication and Configuration The DC/OS provider is using the same config sources as the DC/OS CLI.\n Attached Cluster URL + Token URL + Username and Password Cluster Name  Attached Cluster The easiest solution is using the cluster you\u0026rsquo;re attached to with dcos cluster attach\nprovider \u0026#34;dcos\u0026#34; {} The downside with this is that the user has to make sure being connected to the expected cluster.\nCluster Name If the user has locally setup his dcos-cli with cluster setup \u0026lt;cluster url\u0026gt; The name of a cluster can be used making sure terraform is using the expected cluster. The value is the same as for dcos cluster attach\nprovider \u0026#34;dcos\u0026#34; { cluster = \u0026#34;my-dcos-production-cluster\u0026#34; } Username and Password ENTERPRISE ONLY\nThis method is using a username and password to authenticate against the DC/OS cluster. Be aware that this will not work with DC/OS Open Source.\nprovider \u0026#34;dcos\u0026#34; { dcos_url = \u0026#34;\u0026lt;cluster url\u0026gt;\u0026#34; user = \u0026#34;bootstrapuser\u0026#34; password = \u0026#34;\u0026lt;secret dcos password\u0026gt;\u0026#34; } ACS Token If you\u0026rsquo;re using open source and don\u0026rsquo;t want to use the attached cluster feature you have to specify the ACS token of a user (dcos config show core.dcos_acs_token). The token in combination with the cluster url give the dcos-provider access to your cluster.\nprovider \u0026#34;dcos\u0026#34; { dcos_url = \u0026#34;\u0026lt;cluster url\u0026gt;\u0026#34; dcos_acs_token = \u0026#34;\u0026lt;dcos_acs_token\u0026gt;\u0026#34; } Argument Reference  dcos_acs_token The DC/OS access token ssl_verify Verify SSL connection. Can be set to false to ignore certificate errors. (Default: true) dcos_url The cluster URL. The same URL you reach the DC/OS UI cluster The cluster name configured in dcos-cli. dcos cluster list user ENTERPRISE ONLY The username to be used to connect to the DC/OS cluster. password ENTERPRISE ONLY The password to be used to connect to the DC/OS cluster.  "},{"idx":25,"href":"/terraform-provider-dcos/categories/","title":"Categories","content":""},{"idx":26,"href":"/terraform-provider-dcos/docs/","title":"Docs","content":""},{"idx":27,"href":"/terraform-provider-dcos/tags/","title":"Tags","content":""}];window.bookSearch={pages:pages,idx:lunr(function(){this.ref("idx");this.field("title");this.field("content");pages.forEach(this.add,this);}),}})();